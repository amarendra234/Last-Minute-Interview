class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int k=0,i=0,j=0;
        int val1;
        int val2;
        int n=nums1.size();
        int m=nums2.size();
        int mid=(n+m)/2;
        while(i<n and j<m){
            if(nums1[i]>=nums2[j]){
                if(k==mid-1){
                    val1=nums2[j];
                }
                if(k==mid){
                    val2=nums2[j];
                }
                j++;
            }else{
                if(k==mid-1){
                    val1=nums1[i];
                }
                if(k==mid){
                    val2=nums1[i];
                }
                i++;
            }
            k++;
        }
        while(i<n){
                if(k==mid-1){
                    val1=nums1[i];
                }
                if(k==mid){
                    val2=nums1[i];
                }
                i++;
                k++;
        }
        while(j<m){
                if(k==mid-1){
                    val1=nums2[j];
                }
                if(k==mid){
                    val2=nums2[j];
                }
                j++;
                k++;
        }
       // cout<<val1<<" "<<val2<<endl;
        if((n+m)%2!=0){
            return val2*1.0;
        }
        return (val1+val2)/2.0;
    }
};
